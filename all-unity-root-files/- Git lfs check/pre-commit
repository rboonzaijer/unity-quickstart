#!/bin/sh

# This will do a check before each commit to make sure no extreme large files (above $min_bytes_error) are stored without git-lfs.

# Save this file as: .git/hooks/pre-commit
# Workflow: Do each commit from the windows commandline (cmd).
# It also gives warnings for files above $min_bytes_warning, but you are able to continue the commit.
# When warnings or errors occur, it will also give the commands to fix them.


# thresholds
min_bytes_warning=$((10 * 1024 * 1024))   # 10 MB
min_bytes_error=$((50 * 1024 * 1024))     # 50 MB

# status
HAS_ERROR=0
HAS_WARNING=0
FIX_ERROR_COMMANDS=""
FIX_WARNING_COMMANDS=""

# show human readable file size
human_size() {
  bytes=$1
  if   [ "$bytes" -ge 1073741824 ]; then
    awk "BEGIN {printf \"%.1fG\", $bytes/1073741824}"
  elif [ "$bytes" -ge 1048576 ]; then
    awk "BEGIN {printf \"%.1fM\", $bytes/1048576}"
  elif [ "$bytes" -ge 1024 ]; then
    awk "BEGIN {printf \"%.1fK\", $bytes/1024}"
  else
    echo "${bytes}B"
  fi
}

# create a command that will add a single file to LFS
make_lfs_command() {
    local path="$1"
    echo "git lfs track -- \"$path\" && git add .gitattributes && git add --renormalize -- \"$path\""
}

# determine if a file path is already tracked with LFS
is_lfs_tracked() {
    local path="$1"
    # Show the staged blob contents
    if git show :"$path" 2>/dev/null | head -n1 | grep -q "version https://git-lfs.github.com/spec/v1"; then
        return 0  # yes, it's an LFS pointer
    fi
    return 1
}

# quickly count the files to give a first indication of what we are dealing with
echo ""
echo "-> pre-commit: amount staged files to check:"
amount_files=$(git diff --name-only --cached | wc -l)
echo "$amount_files"
echo ""

# get staged files with their sizes in bytes
echo "-> get staged files with their sizes in bytes (can take a while on large changesets)"
files=$(git diff --name-only --cached -z | xargs -0 -I {} du -b -- "{}")

# count total number of files
total=$(printf "%s\n" "$files" | wc -l)
i=0

# loop through results
echo "-> loop through results"
while IFS=$'\t' read -r size path; do
    i=$((i+1))
    percent=$(( i * 100 / total ))
    printf "\rpre-commit progress: [%d/%d] (%d%%)" "$i" "$total" "$percent"

    # skip if already tracked by LFS
    if is_lfs_tracked "$path"; then
        continue
    fi

    # check file size
    if [[ $size -ge $min_bytes_error ]]; then
        # file is larger then the min_bytes_error
        HAS_ERROR=1

        printf "\n❌ [%s] %s \n" "$(human_size "$size")" "$path"
        FIX_ERROR_COMMANDS="$FIX_ERROR_COMMANDS\n$(make_lfs_command "$path")"

    elif [[ $size -ge $min_bytes_warning ]]; then
        # file is larger then the min_bytes_warning
        HAS_WARNING=1

        printf "\n⚠️ [%s] %s \n" "$(human_size "$size")" "$path"
        FIX_WARNING_COMMANDS="$FIX_WARNING_COMMANDS\n$(make_lfs_command "$path")"
    fi
done <<< "$files"

# show commands to fix warnings
if [ $HAS_WARNING -eq 1 ]; then
    echo ""
    echo "Use these commands to fix your warnings:"
    echo "⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️"
    printf "%b\n" "${FIX_WARNING_COMMANDS#\\n}"
    echo ""
    echo "⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️"
fi

# show commands to fix errors
if [ $HAS_ERROR -eq 1 ]; then
    echo ""
    echo "Use these commands to fix your errors:"
    echo "❌❌❌❌❌❌❌❌❌❌❌❌❌❌❌❌❌❌❌❌"
    printf "%b\n" "${FIX_ERROR_COMMANDS#\\n}"
    echo ""
    echo "❌❌❌❌❌❌❌❌❌❌❌❌❌❌❌❌❌❌❌❌"
fi

# exit on errors directly
if [ $HAS_ERROR -eq 1 ]; then
    echo ""
    echo "❌ ERROR: Huge files found that are not tracked by Git LFS, can not continue"
    exit 1
fi

# prompt on warnings - be able to continue
if [ $HAS_WARNING -eq 1 ]; then
    echo ""
    echo "⚠️ WARNING: Large files found that are not tracked by Git LFS"
    echo ""
	read -p "-> Ignore warnings and continue commit? [y|n] " -n 1 -r < /dev/tty
	echo
	if echo $REPLY | grep -E '^[Yy]$' > /dev/null; then
		echo "Continue commit..."
	else
		echo ":exit"
		exit 1
	fi
fi

echo ""
echo "Validation complete, starting commit..."
echo ""
exit 0
